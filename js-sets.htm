<!DOCTYPE html>
<html>
<head>
<style>
</style>
</head>
<body>


<script>
let set1 = new Set();
set1.add('red')
console.log(set1.has('red'));
// true, works in IE

console.log(set1.size);
// 1, works in IE

set1.delete('red')
console.log(set1.has('red'));
// false, works in IE

console.log(set1.size);
// 0, works in IE

set1.add('red')
set1.add('green')
console.log(set1); // works in IE
set1.clear();
console.log(set1); // works in IE

console.log("---");

let arr = [1, 1, 2, 1, 3];
let mySet = new Set(arr); // Set { 1, 2, 3 } - not in IE
console.log(mySet);

let mySet2 = new Set('123');  // Set { 1, 2, 3 } - not in IE
console.log(mySet2);
</script>

<pre>let set = new Set();
set.add('red')
console.log(set.has('red'));
// true, works in IE

console.log(set.size);
// 1, works in IE

set.delete('red')
console.log(set.has('red'));
// false, works in IE

console.log(set.size);
// 0, works in IE

set.add('red')
set.add('green')
console.log(set); // works in IE
set.clear();
console.log(set); // works in IE

console.log("---");

let arr = [1, 1, 2, 1, 3];
let mySet = new Set(arr); // Set(3) { 1, 2, 3 } - not in IE
console.log(mySet);

let mySet2 = new Set('123');  // Set(3) {"1", "2", "3"} - not in IE
console.log(mySet2);</pre>

<hr>
<script>
console.log("---");

console.log('Only unique characters will be in this set.'.length); // 43
let sentence = new Set('Only unique characters will be in this set.'); // Not in IE
console.log(sentence.size); // 18

let str = 'Only unique characters will be in this set.';
let set2 = new Set();
for ( let i=0; i<str.length; i++){ set2.add(str[i]); }	// works in IE
console.log(set2.size); // 18
console.log(set2); // Set(18) {"O", "n", "l", "y", " ", …}
</script>

<pre>Strings are a valid iterable so they can also be passed-in to initialize a set:

console.log('Only unique characters will be in this set.'.length); // 43

let sentence = new Set('Only unique characters will be in this set.');  // Not in IE
console.log(sentence.size); // 18

let str = 'Only unique characters will be in this set.';
let set = new Set();
for ( let i=0; i&lt;str.length; i++){ set.add(str[i]); }	// works in IE
console.log(set.size);
// 18
</pre>

<hr>

<script>
console.log("---");
let animals = new Set();

animals.add('🐷');
animals.add('🐼');
animals.add('🐢');
animals.add('🐿');
console.log(animals.size); // 4 - works in IE
animals.add('🐼');
console.log(animals.size); // 4 - works in IE

console.log(animals.has('🐷')); // true - works in IE
animals.delete('🐷');
console.log(animals.has('🐷')); // false - works in IE

animals.forEach(animal => {
  console.log(`Hey ${animal}!`);
});

// Hey 🐼! - not in IE
// Hey 🐢!
// Hey 🐿!

animals.clear();
console.log(animals.size); // 0
</script>

<pre>Sets are a new object type with ES6 (ES2015) that allow to create collections of <b>unique values.</b> The values in a set can be either simple primitives like strings or integers, but more complex object types like object literals or arrays can also be part of a set.

Here’s a simple example showing off a basic set and a few of the available methods on it like  add, size, has, forEach, delete and clear:

let animals = new Set();

animals.add('🐷');
animals.add('🐼');
animals.add('🐢');
animals.add('🐿');
console.log(animals.size); // 4
animals.add('🐼');
console.log(animals.size); // 4

console.log(animals.has('🐷')); // true
animals.delete('🐷');
console.log(animals.has('🐷')); // false

animals.forEach(animal => {
  console.log(`Hey ${animal}!`);
});

// Hey 🐼! - not in IE
// Hey 🐢!
// Hey 🐿!

animals.clear();
console.log(animals.size); // 0

<hr>Here’s another example where we pass-in an array to initialize the set. Notice how the initializing array gets deconstructed, but an array added added later stays in the form of an array:

let myAnimals = new Set(['🐷', '🐢', '🐷', '🐷']);

myAnimals.add(['🐨', '🐑']);
myAnimals.add({ name: 'Rud', type: '🐢' });
console.log(myAnimals.size); // 4

myAnimals.forEach(animal => {
  console.log(animal);
});


// 🐷
// 🐢
// ["🐨", "🐑"]
// Object { name: "Rud", type: "🐢" }
</pre>


<script>
let myAnimals = new Set(['🐷', '🐢', '🐷', '🐷']);

myAnimals.add(['🐨', '🐑']);
myAnimals.add({ name: 'Rud', type: '🐢' });
console.log(myAnimals.size); // 4

myAnimals.forEach(animal => {
  console.log(animal);
});
</script>

<hr><pre>On top of using forEach on a set, for…of loops can also be used to iterate over sets:

let moreAnimals = new Set(['🐺', '🐴', '🐕', '🐇']);

for (let animal of moreAnimals) {
  console.log(`Howdy ${ animal }`);
}

// Howdy 🐺 - not in IE
// Howdy 🐴
// Howdy 🐕
// Howdy 🐇
</pre>


<script>
let moreAnimals = new Set(['🐺', '🐴', '🐕', '🐇']);

for (let animal of moreAnimals) {
  console.log(`Howdy ${ animal }`);
}
</script>

<hr>
<pre>
Keys and Values
Sets also have the keys and values methods, with keys being an alias for values, so both methods do exactly the same thing. Using either of these methods returns a new iterator object with the values of the set in the same order in which they were added to the set. Here’s an example:

let partyItems = new Set(['🍕', '🍾', '🎊']);
let items = partyItems.values();

console.log(items.next());
console.log(items.next());
console.log(items.next());
console.log(items.next().done);

// Object {
//   done: false,
//   value: "🍕"
// }

// Object {
//   done: false,
//   value: "🍾"
// }

// Object {
//   done: false,
//   value: "🎊"
// }

// true
</pre>
<script>
let partyItems = new Set(['🍕', '🍾', '🎊']);
let items = partyItems.values();

console.log(items.next());
console.log(items.next());
console.log(items.next());
console.log(items.next().done);
</script>
<hr>
<pre>Set Properties
Set.prototype
Set.prototype.size
get Set[@@species]

Set  Methods
Set.prototype.add()
Set.prototype.clear()
Set.prototype.delete()
Set.prototype.entries()
Set.prototype.forEach()
Set.prototype.has()
Set.prototype.values()
Set.prototype[@@iterator]()
</pre>
</body>
</html>
